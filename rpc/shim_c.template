{{=[[ ]]=}}
#include "config.h"
#include <stdarg.h>

#include "shim.h"
#include "rpc.h"

#ifndef __APPLE__
#include <dlfcn.h>
__attribute__((regparm (3))) extern void *_dl_sym(void *handle,
	const char *symbol, const void *rtraddr);
#else
struct interpose {
	const void *replacment;
	const void *replacee;
};
#endif
[[#functions]]

[[type]]
#ifdef __APPLE__
retrace_impl_[[name]]([[#params]][[type]][[name]][[^last]], [[/last]][[/params]][[#variadic]], ...[[/variadic]])
#else
([[name]])([[#params]][[type]][[name]][[^last]], [[/last]][[/params]][[#variadic]], ...[[/variadic]])
#endif
{
	enum rpc_msg_type _msg_type;
	static const enum rpc_function_id _function_id = RPC_[[name]];
	int _fd, _complete = 0;
	char _buf[256][[#has_parameters]], *_p[[/has_parameters]];
[[#variadic]]
	va_list ap;
[[/variadic]]
[[#result]]
	[[type]]_result;
[[/result]]

	_fd = rpc_sockfd();

	rpc_send(_fd, RPC_MSG_CALL_INIT, &_function_id, sizeof(_function_id));

	while (!_complete) {
		_msg_type = rpc_recv(_fd, _buf);

		switch (_msg_type)
		{
		case RPC_MSG_DONE:
			_complete = 1;
			break;
[[#result]]
		case RPC_MSG_GET_RESULT:
			rpc_send(_fd, RPC_MSG_SET_RESULT, (void *)&_result, sizeof(_result));
			break;
		case RPC_MSG_SET_RESULT:
			_result = *([[type]]*)_buf;
			break;
[[/result]]
[[#has_parameters]]
		case RPC_MSG_GET_PARAMETERS:
			_p = _buf;
[[#params]]
			*([[rpctype]]*)_p = [[name]];
			_p += sizeof([[name]]);
[[/params]]
			rpc_send(_fd, RPC_MSG_SET_PARAMETERS, _buf, _p - _buf);
			break;
		case RPC_MSG_SET_PARAMETERS:
			_p = _buf;
[[#params]]
			[[name]] = *([[rpctype]]*)_p;
[[^last]]
			_p += sizeof([[name]]);
[[/last]]
[[/params]]
			break;
[[/has_parameters]]
		case RPC_MSG_DO_CALL:
[[#variadic]]
			va_start(ap, [[last_param]]);
			[[#result]]_result = [[/result]][[variadic]]([[#params]][[name]], [[/params]]ap);
			va_end(ap);
[[/variadic]]
[[^variadic]]
			[[#result]]_result = [[/result]]real_[[name]]([[#params]][[name]][[^last]], [[/last]][[/params]]);
[[/variadic]]
			break;
		default:
			rpc_handle_message(_fd, _msg_type, _buf);
			break;
		}
	}

	return [[#result]]_result[[/result]];
}

#ifdef __APPLE__
static struct interpose _interpose_[[name]] __attribute__((used, section("__DATA,__interpose"))) = {
	(const void *)(unsigned long)&retrace_impl_[[name]],
	(const void *)(unsigned long)&[[name]]
};
rtr_[[name]]_t real_[[name]] = [[name]];
#else
[[type]]
rtr_fixup_[[name]]([[#params]][[type]][[name]][[^last]], [[/last]][[/params]][[#variadic]], ...[[/variadic]])
{
	void *fn = _dl_sym(RTLD_NEXT, "[[name]]", rtr_fixup_[[name]]);
#ifdef HAVE_ATOMIC_BUILTINS
	__atomic_store_n(&real_[[name]], fn, __ATOMIC_RELAXED);
#else
	real_[[name]] = fn;
#endif
[[^variadic]]
	[[#result]]return [[/result]]real_[[name]]([[#params]][[name]][[^last]], [[/last]][[/params]]);
[[/variadic]]
[[#variadic]]
	va_list ap;
	va_start(ap, [[last_param]]);
	[[#result]][[type]]ret = [[/result]][[variadic]]([[#params]][[name]], [[/params]]ap);
	va_end(ap);
	return[[#result]] ret[[/result]];
[[/variadic]]
}
__attribute__((visibility("hidden"))) rtr_[[name]]_t real_[[name]] = rtr_fixup_[[name]];
#endif
[[/functions]]
