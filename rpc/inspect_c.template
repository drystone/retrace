{{=[[ ]]=}}
#include "inspect.h"
#include "shim.h"
#include "rpc.h"
#include <string.h>

[[#functions]]

static struct retrace_call_info*
get_[[name]]_info(struct rpc_[[name]] *call)
{
	struct retrace_call_info *ci;
	struct retrace_arg_info *args;
	int i;
	char *data;

	ci = malloc(sizeof(struct retrace_call_info) + ([[paramcount]] + 1) * sizeof(struct retrace_arg_info));
	args = (struct retrace_arg_info *)&ci[1];
	ci->args = args;
	data = (char *)&call[1];

	ci->name = "[[name]]";
	ci->ctype = "[[type]]";
	ci->rpctype = [[rpctypenum]];
	[[^is_void]]
	*([[rpctype]]*)&(ci->result) = call->rval;
	[[/is_void]]

	i = 0;
	[[#params]]
	args[i].name = "[[name]]";
	args[i].ctype = "[[type]]";
	args[i].rpctype = [[rpctypenum]];
	[[#is_string]]
	*([[rpctype]]*)&(args[i].value) = data;
	data += strlen((char *)data) + 1;
	[[/is_string]]
	[[^is_string]]
	*([[rpctype]]*)&(args[i].value) = call->args.[[name]];
	[[/is_string]]
	++i;
	[[/params]]
	args[i].name = NULL;

	return ci;
}
[[/functions]]

struct retrace_call_info *
retrace_get_call_info(enum rpc_function_id id, void *call)
{
	static struct retrace_call_info *(*fn[])(void *) = {
		[[#functions]]
		(struct retrace_call_info *(*)(void *))get_[[name]]_info[[^last]],[[/last]]
		[[/functions]]
	};
	return fn[id](call);
}
